import os
import logging
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
import sqlite3
import re
import atexit
import requests
import schedule
import time
import threading
from liqpay import LiqPay
import base64
import json
import hashlib
import uuid

# Initialize the bot
bot = telebot.TeleBot('–í–ê–®_–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢–ê')
admin_ids = [–í–ê–®_–ê–ô–î–ò_–¢–ï–õ–ï–ì–†–ê–ú–ê]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è LiqPay
TEST_PUBLIC_KEY = '–í–ê–®_–ü–£–ë–õ–Ü–ß–ù–ò–ô_–¢–û–ö–ï–ù_–û–ü–õ–ê–¢–ò'
TEST_PRIVATE_KEY = '–í–ê–®_–ü–†–ò–í–ê–¢–ù–ò–ô_–¢–û–ö–ï–ù_–û–ü–õ–ê–¢–ò'

# SQLite database connection
conn = sqlite3.connect('shop_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    city TEXT,
    subscribed INTEGER DEFAULT 0
)''')
conn.commit()


cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    full_name TEXT,
    item_name TEXT,
    item_price REAL,
    address TEXT,
    order_id TEXT,  -- –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É order_id
    status TEXT DEFAULT "–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è"
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS cart (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    item_name TEXT,
    item_price REAL,
    quantity INTEGER DEFAULT 1
)
''')
conn.commit()


cursor.execute('''CREATE TABLE IF NOT EXISTS catalog (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    category TEXT,
    name TEXT,
    description TEXT,
    price TEXT,
    photo_url TEXT
)''')
conn.commit()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
current_directory = os.path.dirname(os.path.abspath(__file__))
log_file_path = os.path.join(current_directory, 'bot.log')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –≤–∫–∞–∑—ñ–≤–∫–æ—é –∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file_path, encoding='utf-8'),  # –í–∫–∞–∑—É—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è
        logging.StreamHandler()  # –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–≤–µ–¥–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
def log_event(event, user_id=None, username=None):
    if user_id and username:
        logging.info(f"{event} - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: {user_id}, Username: @{username}")
    else:
        logging.info(event)


@atexit.register
def close_db():
    conn.close()

# Adding items to the catalog table (only once)
def add_items_to_catalog():
    items = [
        ("smartphones", "–°–º–∞—Ä—Ç—Ñ–æ–Ω A", "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –ø–æ—Ç—É–∂–Ω–∏–º –∞–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º", "10,000 –≥—Ä–Ω",
         "https://bomba.if.ua/upload/resize_cache/webp/iblock/6bd/m0b811yhj5dwiqr1m71qlp7hu88bea84.webp"),
        ("smartphones", "–°–º–∞—Ä—Ç—Ñ–æ–Ω B", "–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è", "15,000 –≥—Ä–Ω",
         "https://www.rbc.ua/static/ckef2/img/66_1500.jpg"),
        ("smartphones", "–°–º–∞—Ä—Ç—Ñ–æ–Ω C", "–ë—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—É", "5,000 –≥—Ä–Ω",
         "https://files.foxtrot.com.ua/PhotoNew/1_638126582647337668.jpg"),
        ("laptops", "–ù–æ—É—Ç–±—É–∫ A", "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫", "20,000 –≥—Ä–Ω",
         "https://scdn.comfy.ua/89fc351a-22e7-41ee-8321-f8a9356ca351/https://cdn.comfy.ua/media/catalog/product/0/2/02_ideapad_1_hero_front_facing_jd.jpg/w_600"),
        ("laptops", "–ù–æ—É—Ç–±—É–∫ B", "–í–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –Ω–æ—É—Ç–±—É–∫", "30,000 –≥—Ä–Ω",
         "https://www.ixbt.com/img/r30/00/02/58/65/IMG3013.jpg"),
        ("headphones", "–ù–∞–≤—É—à–Ω–∏–∫–∏ A", "–ë–µ–∑–ø—Ä–æ–≤—ñ–¥–Ω—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –∑ —à—É–º–æ–∑–∞–≥–ª—É—à–µ–Ω–Ω—è–º", "2,500 –≥—Ä–Ω",
         "https://i.moyo.ua/img/news/1677/ua_74_400x400x_1699964475.jpg"),
        ("headphones", "–ù–∞–≤—É—à–Ω–∏–∫–∏ B", "–ö–ª–∞—Å–∏—á–Ω—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏", "1,500 –≥—Ä–Ω",
         "https://cdn.vogue.ua/i/image_720x/uploads/article-inline/0d6/254/b97/5b97b972540d6.jpeg.webp")
    ]
    cursor.executemany("INSERT INTO catalog (category, name, description, price, photo_url) VALUES (?, ?, ?, ?, ?)",
                       items)
    conn.commit()

# Add items if the catalog table is empty
cursor.execute("SELECT COUNT(*) FROM catalog")
if cursor.fetchone()[0] == 0:
    add_items_to_catalog()

# Function to get items by category
def get_items_by_category(category):
    cursor.execute("SELECT id, name, description, price, photo_url FROM catalog WHERE category = ?", (category,))
    return cursor.fetchall()

# Validate name
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë]+$", name))

# Validate address
def is_valid_address(address):
    return len(address) > 5


@bot.message_handler(commands=['start'])
def welcome_message(message):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–º–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    keyboard.add(
        KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞"),
        KeyboardButton("‚ùì –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏")
    )
    keyboard.add(
        KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω"),
        KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤"),
        KeyboardButton("üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        KeyboardButton("üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
    )
    keyboard.add(
        KeyboardButton("üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏"),
        KeyboardButton("üì¨ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É"),
        KeyboardButton("üö´ –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –ø–æ–≥–æ–¥–∏")
    )
    keyboard.add(KeyboardButton("‚úâÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"))

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    if message.from_user.id in admin_ids:
        keyboard.add(
            KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"),
            KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"),
            KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å"),
            KeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    bot.send_message(
        message.chat.id,
        "üëã –í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –±–æ—Ç—ñ –º–∞–≥–∞–∑–∏–Ω—É –¢–µ—Ö–Ω–æ—Å–æ–≤–∞!\n\n"
        "üõí –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏: —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏, –Ω–æ—É—Ç–±—É–∫–∏, –Ω–∞–≤—É—à–Ω–∏–∫–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ. "
        "–ù–∞—à–∞ –º—ñ—Å—ñ—è - –Ω–∞–¥–∞–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É–≤–∞—Ç–∏ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.\n\n"
        "‚ÑπÔ∏è –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞\n"
        "‚Ä¢ –ó–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏\n\n"
        "‚ùì –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏\" –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.\n\n"
        "–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üíº",
        reply_markup=keyboard
    )
    log_event("–ö–æ–º–∞–Ω–¥–∞ /start –≤–∏–∫–æ–Ω–∞–Ω–∞", message.from_user.id, message.from_user.username)


@bot.message_handler(func=lambda message: message.text == "üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
def handle_start_button(message):
    welcome_message(message)

@bot.message_handler(func=lambda message: message.text == "‚ùì –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏")
def handle_help_button(message):
    help_command(message)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω")
def handle_info_button(message):
    info_command(message)

@bot.message_handler(func=lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤")
def handle_catalog_button(message):
    show_catalog(message)

@bot.message_handler(func=lambda message: message.text == "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def handle_catalog_button(message):
    user_view_orders(message)

@bot.message_handler(func=lambda message: message.text == "üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
def handle_catalog_button(message):
    view_cart(message)

@bot.message_handler(func=lambda message: message.text == "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏")
def handle_weather_button(message):
    weather_command(message)

@bot.message_handler(func=lambda message: message.text == "üì¨ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É")
def handle_subscribe_weather_button(message):
    subscribe_weather(message)

@bot.message_handler(func=lambda message: message.text == "üö´ –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –ø–æ–≥–æ–¥–∏")
def handle_unsubscribe_weather_button(message):
    unsubscribe_weather(message)

@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")
def handle_feedback_button(message):
    feedback_command(message)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä" and message.from_user.id in admin_ids)
def handle_add_item_button(message):
    add_item(message)

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä" and message.from_user.id in admin_ids)
def handle_delete_item_button(message):
    delete_item(message)

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å" and message.from_user.id in admin_ids)
def handle_view_orders_button(message):
    admin_view_orders(message)

@bot.message_handler(func=lambda message: message.text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" and message.from_user.id in admin_ids)
def handle_update_order_status_button(message):
    update_order_status(message)




# Display the main catalog with subcategories
@bot.message_handler(commands=['catalog'])
def show_catalog(message):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üì±–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏", callback_data="category_smartphones"),
        InlineKeyboardButton("üíª–ù–æ—É—Ç–±—É–∫–∏", callback_data="category_laptops"),
        InlineKeyboardButton("üéß–ù–∞–≤—É—à–Ω–∏–∫–∏", callback_data="category_headphones")
    )
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)

@bot.message_handler(commands=['add_item'])
def add_item(message):
    if message.from_user.id in admin_ids:
        bot.send_message(message.chat.id, "‚úèÔ∏è–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:")
        bot.register_next_step_handler(message, process_category_step)
    else:
        bot.send_message(message.chat.id, "üîí–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.üîí")


# Process category step
def process_category_step(message):
    chat_id = message.chat.id
    category = message.text
    bot.send_message(chat_id, "üìÉ–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, process_name_step, category)


def process_name_step(message, category):
    chat_id = message.chat.id
    name = message.text
    bot.send_message(chat_id, "üìí–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, process_description_step, category, name)


def process_description_step(message, category, name):
    chat_id = message.chat.id
    description = message.text
    bot.send_message(chat_id, "üíµ–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, process_price_step, category, name, description)


def process_price_step(message, category, name, description):
    chat_id = message.chat.id
    price = message.text
    bot.send_message(chat_id, "üîó–í–≤–µ–¥—ñ—Ç—å URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:")
    bot.register_next_step_handler(message, process_photo_url_step, category, name, description, price)


def process_photo_url_step(message, category, name, description, price):
    chat_id = message.chat.id
    photo_url = message.text

    # Insert the item into the database
    cursor.execute("INSERT INTO catalog (category, name, description, price, photo_url) VALUES (?, ?, ?, ?, ?)",
                   (category, name, description, price, photo_url))
    conn.commit()

    bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É.")

@bot.message_handler(commands=['weather'])
def weather_command(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏:")
    bot.register_next_step_handler(message, process_city_step)

def process_city_step(message):
    city_name = message.text
    api_key = '07280fec99f37dca4efeb9abd36d85ef'  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π API-–∫–ª—é—á
    weather_data = get_weather(city_name, api_key)
    if weather_data:
        bot.send_message(message.chat.id, weather_data)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def get_weather(city_name, api_key):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city_name,
        'appid': api_key,
        'units': 'metric',
        'lang': 'uk'
    }
    try:
        response = requests.get(base_url, params=params)
        data = response.json()
        if data.get('cod') == 200:
            city = data['name']
            country = data['sys']['country']
            temp = data['main']['temp']
            description = data['weather'][0]['description']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']
            return (f"üå§Ô∏è–ü–æ–≥–æ–¥–∞ –≤ {city}, {country}:\n"
                    f"üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"üìù–û–ø–∏—Å: {description.capitalize()}\n"
                    f"üíß–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
                    f"üå¨Ô∏è–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –º/—Å")
        else:
            return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return None

def send_daily_weather():
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∑ –º—ñ—Å—Ç–∞–º–∏
    cursor.execute("SELECT user_id, city FROM users WHERE subscribed = 1")
    users = cursor.fetchall()

    for user_id, city in users:
        weather_data = get_weather(city, '07280fec99f37dca4efeb9abd36d85ef')
        if weather_data:
            bot.send_message(user_id, f"üóìÔ∏è–©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –º—ñ—Å—Ç–∞ {city}:\n\n{weather_data}")
        else:
            bot.send_message(user_id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ {city}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

# –†–æ–∑–∫–ª–∞–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–∞ 8:00 —Ä–∞–Ω–∫—É
def run_scheduler():
    schedule.every().day.at("08:00").do(send_daily_weather)

    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()


@bot.message_handler(commands=['subscribe_weather'])
def subscribe_weather(message):
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    cursor.execute("SELECT subscribed FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 1:
        bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏.")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≥–æ–¥–∏:")
        bot.register_next_step_handler(message, process_weather_subscription)


def process_weather_subscription(message):
    city_name = message.text
    user_id = message.from_user.id
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –º—ñ—Å—Ç–æ —ñ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏
    cursor.execute("INSERT OR REPLACE INTO users (user_id, city, subscribed) VALUES (?, ?, 1)", (user_id, city_name))
    conn.commit()
    bot.send_message(message.chat.id, f"–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏ –¥–ª—è –º—ñ—Å—Ç–∞ {city_name}.")
    log_event(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏  /subscribe_weather –≤–∏–∫–æ–Ω–∞–Ω–∞",message.from_user.id)


@bot.message_handler(commands=['unsubscribe_weather'])
def unsubscribe_weather(message):
    user_id = message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    cursor.execute("SELECT subscribed FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 1:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ 0 (–≤—ñ–¥–ø–∏—Å–∫–∞)
        cursor.execute("UPDATE users SET subscribed = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≥–æ–¥–∏.")
        log_event(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} –≤—ñ–¥–ø–ø–∏—Å–∞–≤—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏  /subscribe_weather –≤–∏–∫–æ–Ω–∞–Ω–∞",message.from_user.id)
    else:
        bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏.")

# Command to delete an item from the catalog (only for admins)
@bot.message_handler(commands=['delete_item'])
def delete_item(message):
    if message.from_user.id in admin_ids:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        bot.register_next_step_handler(message, process_delete_step)
    else:
        bot.send_message(message.chat.id, "üîí–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.üîí")


def process_delete_step(message):
    item_id = message.text
    cursor.execute("SELECT * FROM catalog WHERE id = ?", (item_id,))
    item = cursor.fetchone()

    if item:
        cursor.execute("DELETE FROM catalog WHERE id = ?", (item_id,))
        conn.commit()
        bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä —ñ–∑ ID {item_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞—Ç–∞–ª–æ–≥—É.")
    else:
        bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —ñ–∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


# Get all orders from the database
def get_all_orders():
    cursor.execute("SELECT * FROM orders")
    return cursor.fetchall()

# View orders by the admin
@bot.message_handler(commands=['view_orders'])
def admin_view_orders(message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        orders_list = get_all_orders()
        if orders_list:
            send_order_details(message, orders_list, 0)
        else:
            bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    else:
        bot.send_message(message.chat.id, "üîí–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.üîí")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
def send_order_details(message, orders, index, message_id=None):
    order = orders[index]
    order_id = order[0]
    username = order[2] or "N/A"
    full_name = order[3] or "N/A"
    item_name = order[4] or "N/A"
    item_price = order[5] if order[5] is not None else "N/A"
    address = order[6] or "N/A"
    buy_id = order[7] or "N/A"
    status = order[8] or "N/A"

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_text = (
        f"üì¶ **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}**\n\n"
        f"Username: @{username}\n"
        f"–ü–Ü–ë: {full_name}\n"
        f"–¢–æ–≤–∞—Ä: {item_name}\n"
        f"–¶—ñ–Ω–∞: {item_price} –≥—Ä–Ω\n"
        f"–ê–¥—Ä–µ—Å–∞: {address}\n"
        f"ID –û–ø–ª–∞—Ç–∏: {buy_id}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üì¶ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data=f"set_status_–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ_{order_id}"),
        InlineKeyboardButton("‚è≥ –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è", callback_data=f"set_status_–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è_{order_id}"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"set_status_cancelled_{order_id}"),
        InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"delete_order_{order_id}")
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ–∂ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
    navigation_buttons = []
    if index > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î", callback_data=f"order_navigate_{index - 1}"))
    if index < len(orders) - 1:
        navigation_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–µ ‚û°Ô∏è", callback_data=f"order_navigate_{index + 1}"))
    if navigation_buttons:
        markup.row(*navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
    markup.add(InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="show_order_list"))

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ message_id –ø–µ—Ä–µ–¥–∞–Ω–æ, —ñ–Ω–∞–∫—à–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message_id:
        bot.edit_message_text(
            order_text, chat_id=message.chat.id, message_id=message_id,
            reply_markup=markup, parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, order_text, reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "show_order_list")
def show_order_list(call):
    orders = get_all_orders()
    if orders:
        markup = InlineKeyboardMarkup()
        for i, order in enumerate(orders):
            order_id = order[0]
            markup.add(InlineKeyboardButton(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}", callback_data=f"select_order_{i}"))
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.", show_alert=True)


# Get all orders from the database
def get_all_orders():
    cursor.execute("SELECT * FROM orders")
    return cursor.fetchall()

@bot.message_handler(commands=['my_orders'])
def user_view_orders(message):
    user_id = message.from_user.id
    orders = get_user_orders(user_id)
    if orders:
        send_user_order_details(message, orders, 0)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_orders(user_id):
    cursor.execute("SELECT * FROM orders WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def send_user_order_details(message, orders, index, message_id=None):
    order = orders[index]
    order_id = order[0]
    item_name = order[4] or "N/A"
    item_price = order[5] if order[5] is not None else "N/A"
    address = order[6] or "N/A"
    status = order[8] or "N/A"

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_text = (
        f"üì¶ **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id}**\n\n"
        f"–¢–æ–≤–∞—Ä: {item_name}\n"
        f"–¶—ñ–Ω–∞: {item_price} –≥—Ä–Ω\n"
        f"–ê–¥—Ä–µ—Å–∞: {address}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ–∂ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
    markup = InlineKeyboardMarkup()
    navigation_buttons = []
    if index > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î", callback_data=f"user_order_navigate_{index - 1}"))
    if index < len(orders) - 1:
        navigation_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–µ ‚û°Ô∏è", callback_data=f"user_order_navigate_{index + 1}"))
    if navigation_buttons:
        markup.row(*navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç—Ä–∏–º–∞–Ω–æ", –∞–∫—Ç–∏–≤–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å—ñ "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
    if status == "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ":
        markup.add(InlineKeyboardButton("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ", callback_data=f"confirm_received_{order_id}"))

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ message_id –ø–µ—Ä–µ–¥–∞–Ω–æ, —ñ–Ω–∞–∫—à–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message_id:
        bot.edit_message_text(order_text, chat_id=message.chat.id, message_id=message_id, reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, order_text, reply_markup=markup, parse_mode="Markdown")

# –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("user_order_navigate_"))
def navigate_user_orders(call):
    try:

        # –†–æ–∑–±–∏—Ç—Ç—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        parts = call.data.split("_")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ parts –º—ñ—Å—Ç–∏—Ç—å —Å–∞–º–µ —á–æ—Ç–∏—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫ –æ—á—ñ–∫—É—î—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É 'user_order_navigate_<index>'
        if len(parts) != 4:
            raise ValueError("Incorrect callback format. Expected format: 'user_order_navigate_<index>'")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        index = int(parts[3])

        user_id = call.from_user.id
        orders = get_user_orders(user_id)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
        if 0 <= index < len(orders):
            send_user_order_details(call.message, orders, index, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–±–æ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ —Å–ø–∏—Å–∫—É.")
    except ValueError as ve:
        logging.error(f"ValueError in navigating user orders with callback data: {call.data} - {ve}")
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
    except IndexError as ie:
        logging.error(f"IndexError in navigating user orders with callback data: {call.data} - {ie}")
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_received_"))
def confirm_order_received(call):
    order_id = int(call.data.split("_")[2])
    cursor.execute("UPDATE orders SET status = '–û—Ç—Ä–∏–º–∞–Ω–æ' WHERE id = ?", (order_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —è–∫ –æ—Ç—Ä–∏–º–∞–Ω–µ.")
    bot.send_message(call.message.chat.id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —è–∫ –æ—Ç—Ä–∏–º–∞–Ω–µ.")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.username} (ID: {call.from_user.id}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ID: {order_id}.")

# Handle subcategory selection
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def show_subcategory(call):
    category = call.data.split("_")[1]
    items = get_items_by_category(category)
    if items:
        show_item_details(call.message, items, 0)
    else:
        bot.send_message(call.message.chat.id, "–¶—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞—Ä–∞–∑ –ø–æ—Ä–æ–∂–Ω—è.")

# Display item details from a category
def show_item_details(message, items, index):
    item = items[index]
    message_text = f"**{item[1]}**\n\n{item[2]}\n–¶—ñ–Ω–∞: {item[3]}"

    markup = InlineKeyboardMarkup()
    navigation_buttons = []
    if index > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_navigate_{index - 1}_{item[0]}"))
    if index < len(items) - 1:
        navigation_buttons.append(InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data=f"catalog_navigate_{index + 1}_{item[0]}"))

    if navigation_buttons:
        markup.row(*navigation_buttons)

    catalog_button = InlineKeyboardButton("üóÉÔ∏è–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="back_to_catalog")
    order_button = InlineKeyboardButton("üì¨–ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"confirm_order_{item[0]}")
    add_cart = InlineKeyboardButton("üõí–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{item[0]}")
    markup.add(order_button, catalog_button,add_cart)

    bot.send_photo(chat_id=message.chat.id, photo=item[4], caption=message_text, reply_markup=markup, parse_mode='Markdown')

def add_to_cart(user_id, item_name, item_price):
    cursor.execute("SELECT * FROM cart WHERE user_id = ? AND item_name = ?", (user_id, item_name))
    item = cursor.fetchone()

    if item:
        cursor.execute("UPDATE cart SET quantity = quantity + 1 WHERE user_id = ? AND item_name = ?", (user_id, item_name))
    else:
        cursor.execute("INSERT INTO cart (user_id, item_name, item_price) VALUES (?, ?, ?)", (user_id, item_name, item_price))
    conn.commit()

def remove_from_cart(user_id, item_name):
    cursor.execute("DELETE FROM cart WHERE user_id = ? AND item_name = ?", (user_id, item_name))
    conn.commit()

def get_cart(user_id):
    cursor.execute("SELECT item_name, item_price, quantity FROM cart WHERE user_id = ?", (user_id,))
    return cursor.fetchall()


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_cart_"))
def handle_add_to_cart(call):
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è call.data –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logging.info(f"Received call.data: {call.data}")

    try:
        # –†–æ–∑–±–∏—Ç—Ç—è —Ä—è–¥–∫–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —á–µ—Ç–≤–µ—Ä—Ç–∏–π –µ–ª–µ–º–µ–Ω—Ç —î —á–∏—Å–ª–æ–º
        data_parts = call.data.split("_")
        logging.info(f"Parsed data_parts: {data_parts}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ `data_parts` –º–∞—î —á–æ—Ç–∏—Ä–∏ —á–∞—Å—Ç–∏–Ω–∏, –∞ –æ—Å—Ç–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∞ - —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        if len(data_parts) == 4 and data_parts[3].isdigit():
            item_id = int(data_parts[3])
            logging.info(f"Extracted item_id: {item_id}")

            cursor.execute("SELECT name, price FROM catalog WHERE id = ?", (item_id,))
            item = cursor.fetchone()

            if item:
                item_name, item_price = item
                add_to_cart(call.from_user.id, item_name,
                            float(item_price.replace(",", "").replace(" –≥—Ä–Ω", "").strip()))
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            else:
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç item_id - –º–æ–∂–ª–∏–≤–æ, item_id –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.")
    except (IndexError, ValueError) as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ —á–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ
        logging.error(f"Invalid format for call.data: {call.data} - Error: {e}")
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@bot.message_handler(commands=['view_cart'])
def view_cart(message):
    cart_items = get_cart(message.from_user.id)
    if cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        for item_name, item_price, quantity in cart_items:
            cart_text += f"{item_name} - {item_price} –≥—Ä–Ω x {quantity}\n"
            total += item_price * quantity
        cart_text += f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω"

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        markup = InlineKeyboardMarkup()
        for item_name, item_price, quantity in cart_items:
            markup.add(
                InlineKeyboardButton(f"‚ûï {item_name}", callback_data=f"add_cart_item_{item_name}"),
                InlineKeyboardButton(f"‚ûñ {item_name}", callback_data=f"remove_cart_item_{item_name}")
            )
        markup.add(InlineKeyboardButton("üõçÔ∏è –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout_cart"))
        markup.add(InlineKeyboardButton("üßπ–û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É", callback_data="checkout_cart"))
        bot.send_message(message.chat.id, cart_text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")

# –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—ñ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_cart_item_"))
def handle_add_cart_item(call):
    item_name = call.data.split("_")[3]
    cursor.execute("UPDATE cart SET quantity = quantity + 1 WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
    conn.commit()
    bot.answer_callback_query(call.id, f"–î–æ–¥–∞–Ω–æ –æ–¥–∏–Ω–∏—Ü—é {item_name}")
    view_cart(call.message)  # –û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–æ—é

# –û–±—Ä–æ–±–∫–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—ñ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—ñ
@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_cart_item_"))
def handle_remove_cart_item(call):
    item_name = call.data.split("_")[3]
    cursor.execute("SELECT quantity FROM cart WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
    quantity = cursor.fetchone()[0]
    if quantity > 1:
        cursor.execute("UPDATE cart SET quantity = quantity - 1 WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
    else:
        cursor.execute("DELETE FROM cart WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
    conn.commit()
    bot.answer_callback_query(call.id, f"–ó–º–µ–Ω—à–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {item_name}")
    view_cart(call.message)  # –û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–æ—é



def clear_cart(user_id):
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()

@bot.message_handler(commands=['clear_cart'])
def clear_cart_command(message):
    clear_cart(message.from_user.id)
    bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω—É –æ—á–∏—â–µ–Ω–æ.")

def checkout(user_id):
    cart_items = get_cart(user_id)
    if cart_items:
        for item_name, item_price, quantity in cart_items:
            cursor.execute("INSERT INTO orders (user_id, item_name, item_price, status) VALUES (?, ?, ?, '–≤ –ø—Ä–æ—Ü–µ—Å—ñ')",
                           (user_id, item_name, item_price * quantity))
        conn.commit()
        clear_cart(user_id)
        return True
    return False

# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–∏
# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–∏ –∑ –æ–ø–ª–∞—Ç–æ—é
@bot.callback_query_handler(func=lambda call: call.data == "checkout_cart")
def handle_checkout_cart(call):
    if checkout(call.from_user.id):
        bot.send_message(call.message.chat.id,
                         "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ–±–∞—Ç—å–∫–æ–≤—ñ):")
        bot.register_next_step_handler(call.message, process_full_name_for_cart)
    else:
        bot.send_message(call.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")


# –û–±—Ä–æ–±–∫–∞ –ü–Ü–ë –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–∏
def process_full_name_for_cart(message):
    full_name = message.text
    user_id = message.from_user.id

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ü–Ü–ë –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—Ä–∑–∏–Ω—ñ
    cursor.execute("UPDATE orders SET full_name = ? WHERE user_id = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'", (full_name, user_id))
    conn.commit()

    # –ó–∞–ø–∏—Ç –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(message, process_address_for_cart)


# –û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–∏
def process_address_for_cart(message):
    address = message.text
    user_id = message.from_user.id

    if len(address) > 5:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∞–¥—Ä–µ—Å–∏
        cursor.execute("UPDATE orders SET address = ? WHERE user_id = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'", (address, user_id))
        conn.commit()

        # –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –æ–ø–ª–∞—Ç–∏
        initiate_payment_for_cart(message)
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É.")
        bot.register_next_step_handler(message, process_address_for_cart)


# –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –¥–ª—è –≤—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∑–∏–Ω–∏
def initiate_payment_for_cart(message):
    user_id = message.from_user.id
    cursor.execute("SELECT item_name, item_price FROM orders WHERE user_id = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'", (user_id,))
    items = cursor.fetchall()

    if items:
        total_price = sum([item[1] for item in items])
        order_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π order_id –¥–ª—è –∫–æ—Ä–∑–∏–Ω–∏

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è `order_id` –¥–ª—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
        cursor.execute("UPDATE orders SET order_id = ? WHERE user_id = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'", (order_id, user_id))
        conn.commit()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–ø–ª–∞—Ç–∏
        params = {
            "public_key": TEST_PUBLIC_KEY,
            "version": "3",
            "action": "pay",
            "amount": total_price,  # –ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
            "currency": "UAH",
            "description": f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∫–æ—Ä–∑–∏–Ω–∏ (–∑–∞–≥–∞–ª–æ–º {len(items)} –ø–æ–∑–∏—Ü—ñ–π)",
            "order_id": order_id,
        }

        data = base64.b64encode(json.dumps(params).encode('utf-8')).decode('utf-8')
        signature = create_signature(data, TEST_PRIVATE_KEY)
        payment_link = f"https://www.liqpay.ua/api/3/checkout?data={data}&signature={signature}"

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirm_{order_id}"))

        bot.send_message(
            message.chat.id,
            f"[–î–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º]({payment_link})\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
            parse_mode="Markdown",
            reply_markup=markup
        )
        logging.info(f"–Ü–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω–∏ –Ω–∞ —Å—É–º—É {total_price} –≥—Ä–Ω, order_id: {order_id}")

@bot.message_handler(commands=['checkout'])
def checkout_command(message):
    if checkout(message.from_user.id):
        bot.send_message(message.chat.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")


# –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    if user_id in admin_ids:
        help_text = (
            "üõç –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "/help - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n"
            "/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω\n"
            "/catalog - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n"
            "/weather - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞\n"
            "/subscribe_weather - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏\n"
            "/unsubscribe_weather - –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≥–æ–¥–∏\n"
            "/feedback - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
            "/add_item - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)\n"
            "/delete_item - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–∞—Ç–∞–ª–æ–≥—É –∑–∞ ID (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)\n"
            "/view_orders - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)\n"
            "/update_order - –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"
        )
    else:
        help_text = (
            "üõç –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "/help - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n"
            "/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω\n"
            "/catalog - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n"
            "/weather - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞\n"
            "/subscribe_weather - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ–≥–æ–¥–∏\n"
            "/unsubscribe_weather - –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≥–æ–¥–∏\n"
            "/feedback - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )
    bot.send_message(message.chat.id, help_text)
    log_event("–ö–æ–º–∞–Ω–¥–∞ /help –≤–∏–∫–æ–Ω–∞–Ω–∞", message.from_user.id, message.from_user.username)

# –ö–æ–º–∞–Ω–¥–∞ /feedback - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫, —ñ –≤—ñ–Ω –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    bot.register_next_step_handler(message, handle_feedback)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–≥—É–∫—É
def handle_feedback(message):
    feedback_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–≥—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in admin_ids:
        bot.send_message(
            admin_id,
            f"–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{username} (ID: {user_id}):\n\n{feedback_text}"
        )

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    log_event(f"–í—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ: {feedback_text}", user_id, username)

# –ö–æ–º–∞–Ω–¥–∞ /info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
@bot.message_handler(commands=['info'])
def info_command(message):
    info_text = (
        "üì¢ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –¢–µ—Ö–Ω–æ—Å–æ–≤–∞!\n\n"
        "üïí –ß–∞—Å —Ä–æ–±–æ—Ç–∏: –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ - –ü‚Äô—è—Ç–Ω–∏—Ü—è, 9:00 - 19:00\n"
        "üìÖ –î–Ω—ñ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–ü—Ç\n"
        "üìç –ê–¥—Ä–µ—Å–∞: –≤—É–ª. –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ–π, 15, –ö–∏—ó–≤\n\n"
        "–£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏: —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏, –Ω–æ—É—Ç–±—É–∫–∏, –Ω–∞–≤—É—à–Ω–∏–∫–∏ "
        "—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ. –ù–∞—à–∞ –º—ñ—Å—ñ—è - –Ω–∞–¥–∞–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—É —Ç–µ—Ö–Ω—ñ–∫—É –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É–≤–∞—Ç–∏ "
        "–≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞. –î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üíº\n\n"
        "–ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏, —è–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è!"
    )
    bot.send_message(message.chat.id, info_text)
    log_event("–ö–æ–º–∞–Ω–¥–∞ /info –≤–∏–∫–æ–Ω–∞–Ω–∞", message.from_user.id, message.from_user.username)

# Update order status
@bot.message_handler(commands=['update_order'])
def update_order_status(message):
    if message.from_user.id in admin_ids:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:")
        bot.register_next_step_handler(message, process_update_status_step)
    else:
        bot.send_message(message.chat.id, "üîí–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.üîí")

def process_update_status_step(message):
    order_id = message.text
    cursor.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = cursor.fetchone()

    if order:
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:", reply_markup=build_status_markup(order_id))
    else:
        bot.send_message(message.chat.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def build_status_markup(order_id):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data=f"set_status_–í—ñ–¥–ø—Ä–≤–ª–µ–Ω–Ω–æ_{order_id}"),
        InlineKeyboardButton("–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è", callback_data=f"set_status_processing_{order_id}"),
        InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data=f"set_status_cancelled_{order_id}")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_status_"))
def update_status(call):
    order_id = int(call.data.split("_")[-1])
    new_status = call.data.split("_")[2]

    if new_status == "cancelled":
        cursor.execute("DELETE FROM orders WHERE id = ?", (order_id,))
        response_message = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–µ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–µ."
    else:
        cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
        response_message = f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_status}'."

    conn.commit()
    bot.answer_callback_query(call.id, response_message)
    bot.send_message(call.message.chat.id, response_message)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_order_"))
def delete_order(call):
    order_id = int(call.data.split("_")[-1])
    cursor.execute("DELETE FROM orders WHERE id = ?", (order_id,))
    conn.commit()

    bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    bot.send_message(call.message.chat.id, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("catalog_navigate_"))
def navigate_catalog_items(call):
    try:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"Received callback data: {call.data}")
        data_parts = call.data.split("_")
        logging.info(f"Split callback data: {data_parts}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –¥–∞–Ω—ñ —Å–∫–ª–∞–¥–∞—é—Ç—å—Å—è –∑ —á–æ—Ç–∏—Ä—å–æ—Ö —á–∞—Å—Ç–∏–Ω
        if len(data_parts) == 4:
            _, _, index_str, item_id_str = data_parts

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —É —á–∏—Å–ª–∞
            index = int(index_str)
            item_id = int(item_id_str)

            logging.info(f"Parsed index={index}, item_id={item_id}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
            category = get_item_category(item_id)
            items = get_items_by_category(category)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —ñ–Ω–¥–µ–∫—Å—É
            if items and 0 <= index < len(items):
                edit_item_details(call.message, items, index)
            else:
                bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∞–±–æ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ —Å–ø–∏—Å–∫—É.", show_alert=True)
                logging.warning(f"Invalid index for catalog navigation: index={index}, total items={len(items)}")
        else:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.", show_alert=True)
            logging.error("Invalid callback data structure")

    except IndexError:
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: —Å–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É.", show_alert=True)
        logging.error("IndexError: —Å–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É")
    except ValueError as e:
        bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥—ñ–π—Å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", show_alert=True)
        logging.error(f"ValueError: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_order_"))
def select_order(call):
    index = int(call.data.split("_")[2])
    orders = get_all_orders()
    bot.delete_message(call.message.chat.id, call.message.message_id)  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    send_order_details(call.message, orders, index)




@bot.callback_query_handler(func=lambda call: call.data.startswith("set_status_"))
def update_status(call):
    order_id = call.data.split("_")[-1]
    new_status = call.data.split("_")[2]

    cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
    conn.commit()

    bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_status}'.")
    bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_status}'.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("order_navigate_"))
def navigate_order_items(call):
    index = int(call.data.split("_")[2])
    orders = get_all_orders()

    if 0 <= index < len(orders):
        # –ü–µ—Ä–µ–¥–∞—î–º–æ message_id, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        send_order_details(call.message, orders, index, message_id=call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∞–±–æ —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ —Å–ø–∏—Å–∫—É.")


# Handle back to catalog
@bot.callback_query_handler(func=lambda call: call.data == "back_to_catalog")
def back_to_catalog(call):
    show_catalog(call.message)

# Get the category of an item
def get_item_category(item_id):
    cursor = conn.cursor()  # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫—É—Ä—Å–æ—Ä
    cursor.execute("SELECT category FROM catalog WHERE id = ?", (item_id,))
    result = cursor.fetchone()
    cursor.close()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫—É—Ä—Å–æ—Ä –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    return result[0] if result else None


# Edit item details
def edit_item_details(message, items, index):
    item = items[index]
    message_text = f"**{item[1]}**\n\n{item[2]}\n–¶—ñ–Ω–∞: {item[3]}"

    markup = InlineKeyboardMarkup()
    navigation_buttons = []
    # –§–æ—Ä–º–∞—Ç callback_data –º–∞—î –±—É—Ç–∏ —Ç–æ—á–Ω–∏–º
    if index > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_navigate_{index - 1}_{item[0]}"))
    if index < len(items) - 1:
        navigation_buttons.append(InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data=f"catalog_navigate_{index + 1}_{item[0]}"))

    if navigation_buttons:
        markup.row(*navigation_buttons)

    catalog_button = InlineKeyboardButton("üóÉÔ∏è–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="back_to_catalog")
    order_button = InlineKeyboardButton("üì¨–ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"confirm_order_{item[0]}")
    add_cart = InlineKeyboardButton("üõí–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{item[0]}")
    markup.add(order_button, catalog_button, add_cart)

    media = InputMediaPhoto(media=item[4], caption=message_text, parse_mode='Markdown')
    bot.edit_message_media(chat_id=message.chat.id, message_id=message.message_id, media=media, reply_markup=markup)




def create_signature(data, private_key):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è –∑–∞–ø–∏—Ç—É
    sign_string = private_key + data + private_key
    signature = base64.b64encode(hashlib.sha1(sign_string.encode('utf-8')).digest()).decode('utf-8')
    logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ–¥–ø–∏—Å –¥–ª—è LiqPay: {signature}")
    return base64.b64encode(hashlib.sha1(sign_string.encode('utf-8')).digest()).decode('utf-8')


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
def check_existing_order(user_id, item_name):
    cursor.execute("SELECT * FROM orders WHERE user_id = ? AND item_name = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'", (user_id, item_name))
    return cursor.fetchone() is not None


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_order_"))
def confirm_order(call):
    item_id = int(call.data.split("_")[2])
    cursor.execute("SELECT name, price FROM catalog WHERE id = ?", (item_id,))
    item = cursor.fetchone()

    if item:
        item_name = item[0]

        # –û—á–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        raw_price = item[1].replace(" –≥—Ä–Ω", "").strip()

        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –∫—Ä–∞–ø–∫–∏, –∑–∞–ª–∏—à–∞—é—á–∏ –ª–∏—à–µ –ø–µ—Ä—à—É
        if raw_price.count('.') > 1:
            first_dot_index = raw_price.find('.')
            raw_price = raw_price[:first_dot_index + 1] + raw_price[first_dot_index + 1:].replace('.', '')

        # –ó–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É float
        item_price = float(raw_price.replace(",", "."))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ
        if not check_existing_order(call.from_user.id, item_name):
            cursor.execute(
                "INSERT INTO orders (user_id, username, item_name, item_price, status) VALUES (?, ?, ?, ?, '–≤ –ø—Ä–æ—Ü–µ—Å—ñ')",
                (call.from_user.id, call.from_user.username, item_name, item_price))
            conn.commit()
            bot.send_message(call.message.chat.id,
                             "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–§–∞–º—ñ–ª—ñ—è, —ñ–º'—è, –ü–æ–±–∞—Ç—å–∫–æ–≤—ñ):")
            bot.register_next_step_handler(call.message, process_full_name, item_id)
        else:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –≤–∂–µ —î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É.")


def process_full_name(message, item_id):
    full_name = message.text
    user_id = message.from_user.id

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–æ–¥–∞—é—á–∏ –ü–Ü–ë
    cursor.execute("UPDATE orders SET full_name = ? WHERE user_id = ? AND item_name = (SELECT name FROM catalog WHERE id = ?) AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'",
                   (full_name, user_id, item_id))
    conn.commit()

    # –ó–∞–ø–∏—Ç—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(message, process_address, item_id)

def process_address(message, item_id):
    address = message.text
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∞–¥—Ä–µ—Å–∏
    if len(address) > 5:
        cursor.execute("UPDATE orders SET address = ? WHERE user_id = ? AND item_name = (SELECT name FROM catalog WHERE id = ?) AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'",
                       (address, user_id, item_id))
        conn.commit()

        # –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
        bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.")
        initiate_payment(message, item_id)
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É.")
        bot.register_next_step_handler(message, process_address, item_id)


def initiate_payment(message, item_id):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    cursor.execute("SELECT name, price FROM catalog WHERE id = ?", (item_id,))
    item = cursor.fetchone()

    if item:
        item_name, item_price = item
        item_price = int(float(item_price.replace(",", "").replace(" –≥—Ä–Ω", "").strip()) * 100)

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π order_id
        order_id = str(uuid.uuid4())

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ –ø—Ä–æ—Ü–µ—Å—ñ"
        cursor.execute("SELECT * FROM orders WHERE user_id = ? AND item_name = ? AND status = '–≤ –ø—Ä–æ—Ü–µ—Å—ñ'",
                       (message.from_user.id, item_name))
        existing_order = cursor.fetchone()

        if existing_order:
            # –û–Ω–æ–≤–ª—é—î–º–æ order_id –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
            cursor.execute("UPDATE orders SET order_id = ? WHERE id = ?", (order_id, existing_order[0]))
        else:
            # –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
            cursor.execute("INSERT INTO orders (user_id, username, item_name, item_price, order_id, status) VALUES (?, ?, ?, ?, ?, '–≤ –ø—Ä–æ—Ü–µ—Å—ñ')",
                           (message.from_user.id, message.from_user.username, item_name, item_price, order_id))
        conn.commit()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        params = {
            "public_key": TEST_PUBLIC_KEY,
            "version": "3",
            "action": "pay",
            "amount": item_price / 100,  # –¶—ñ–Ω–∞ –≤ –≥—Ä–∏–≤–Ω—è—Ö
            "currency": "UAH",
            "description": f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä—É: {item_name}",
            "order_id": order_id,
        }

        data = base64.b64encode(json.dumps(params).encode('utf-8')).decode('utf-8')
        signature = create_signature(data, TEST_PRIVATE_KEY)
        payment_link = f"https://www.liqpay.ua/api/3/checkout?data={data}&signature={signature}"

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirm_{order_id}"))

        bot.send_message(
            message.chat.id,
            f"[–î–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º]({payment_link})\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
            parse_mode="Markdown",
            reply_markup=markup
        )
        logging.info(f"–Ü–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –æ–ø–ª–∞—Ç—É: {item_name}, –¶—ñ–Ω–∞: {item_price} –∫–æ–ø—ñ–π–æ–∫, order_id: {order_id}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("payment_confirm_"))
def confirm_payment_status(call):
    order_id = call.data.split("_")[2]

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –¥–ª—è order_id
    payment_status = check_payment_status(order_id)

    if payment_status == "success":
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        cursor.execute("UPDATE orders SET status = '–æ–ø–ª–∞—á–µ–Ω–æ' WHERE user_id = ? AND order_id = ?",
                       (call.from_user.id, order_id))
        conn.commit()

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É
        bot.send_message(call.message.chat.id, "–í–∞—à –ø–ª–∞—Ç—ñ–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–µ –æ–ø–ª–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        for admin_id in admin_ids:
            bot.send_message(admin_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{call.from_user.username} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ID {order_id}.")
        logging.info(f"–ü–ª–∞—Ç—ñ–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: order_id {order_id}, ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {call.from_user.id}")
    else:
        bot.send_message(call.message.chat.id, "–ü–ª–∞—Ç—ñ–∂ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        logging.warning(f"–ù–µ–≤–¥–∞–ª–∏–π –ø–ª–∞—Ç—ñ–∂: order_id {order_id}, –°—Ç–∞—Ç—É—Å: {payment_status}")


def check_payment_status(order_id):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
    params = {
        "public_key": TEST_PUBLIC_KEY,
        "version": "3",
        "action": "status",
        "order_id": order_id,
    }
    data = base64.b64encode(json.dumps(params).encode('utf-8')).decode('utf-8')
    signature = create_signature(data, TEST_PRIVATE_KEY)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ sandbox —Ä–µ–∂–∏–º (—Å–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É)
    if params.get("sandbox") == 1:  # —è–∫—â–æ sandbox —É–≤—ñ–º–∫–Ω–µ–Ω–æ
        print("–°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –≤ sandbox")
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è order_id {order_id}")
        return "success"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ LiqPay API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
    response = requests.post("https://www.liqpay.ua/api/request", data={"data": data, "signature": signature})
    result = response.json()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if result.get("status") == "success":
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è order_id {order_id}")
        return "success"
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É: {result.get('status', 'error')}")
        return result.get("status", "error")  # –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –∞–±–æ 'error'

# –ó–∞–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏
@atexit.register
def close_db():
    conn.close()

bot.remove_webhook()
# Start the bot
log_event("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
bot.polling(none_stop=True)